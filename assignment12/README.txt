Usage:
{How to run neutral_rate.py}
- neutral_rate.py -a PRE1_clustal_output.aln
Question 1:
{Fraction of wobble positions conserved}
- 0.437870
Question 2
{Cutoff for 10bp sequence conserved}
- 8/10

{Explanation}

def pvalGreaterThan05(neutral_wobble_rate, n):
    """
    return the lowest value above which the probability is less than .05 given a total number of items from which to choose and the probability
    :param neutral_wobble_rate: calculated by calculateNeutralWobbleRate() above
    :param n: The total number of items from which to choose
    :return: The number of items to choose from n in order to satisfy p <= .05
    """
    # instantiate a variable with a dummy value to store the significant_threshold when it is found
    significant_threshold = -1
    # iterate over the possible values for k in B(k; n,p)
    for i in range(1,n+1,1):
        # calculate the probability. If it is <= .05, store in significant_threshold and stop iterating
        if stats.binom_test(i, n, neutral_wobble_rate, 'greater') <= .05: # 'greater' since we are only concerned with the right side
            significant_threshold = i
            break
    # raise an error if there is no value which equals or excees .05
    if significant_threshold == -1:
        raise Exception('At the given neutral_wobble_rate of %f, the p value of a full match is still above .05' %neutral_wobble_rate)

    return significant_threshold

Question 3:
{Number of regions}
- 4

Question 4:
{Answer here}
- RPN4

The description of RPN4 from SGD:

Description
    Transcription factor that stimulates expression of proteasome genes; Rpn4p levels are in turn regulated by the 26S proteasome
    in a negative feedback control mechanism; RPN4 is transcriptionally regulated by various stress responses;
    relative distribution to the nucleus increases upon DNA replication stress

The description on the saccharomyces genome database leads me to believe that this TF stimulates proteasome genes. This seems
to be consistent with what we know about PRE1. To  arrive at this answer, I searched each TF with a predicted motif in
the list of conserved promoters generated by neutral_rate.py.


Comments:
{Things that went wrong or you can not figure out}
-

