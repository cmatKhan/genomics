#!/usr/bin/env python3

# https://realpython.com/python-testing/

"""
   Assign cells to one of three groups: control, treatment, non-determined

   usage:
   assign_cells.py -snv /path/to/snv_file -sv /path/to/sv_file
"""

from assignment8_tools.IndividualVariantObject import IndividualVariantObject
from assignment8_tools.IndividualVariantDistribution import IndividualVariantDistribution
import unittest


class TestIndividualVariantObject(unittest.TestCase):
    def test_constructor(self):
        """
        sets IndividualVariantObject called individual_variant_object as a class attribute, tests the constructor and function resetVariantCountDict
        """
        variant_categories = ['SNV', 'INDEL', 'DEL', 'DUP', 'INV', 'MEI', 'BND']
        individual_variant_object = IndividualVariantObject(variant_categories)

        empty_variant_count_dict = {}
        for key in variant_categories:
            empty_variant_count_dict.setdefault(key, [0])

        self.assertEqual(individual_variant_object.variant_categories, variant_categories)
        self.assertEqual(individual_variant_object.variant_count_dict, empty_variant_count_dict)

    def test_setIndividual(self):
        """
        set new attribute individual or update if exists
        """
        variant_categories = ['SNV', 'INDEL', 'DEL', 'DUP', 'INV', 'MEI', 'BND']
        individual_variant_object = IndividualVariantObject(variant_categories)
        individual = 'NA12878'
        individual_variant_object.setIndividual(individual)

        self.assertEqual(individual_variant_object.individual, individual)

    def test_setVcfPathAndType(self):
        """

        :param file_type:
        :param file_path:
        :return:
        """
        variant_categories = ['SNV', 'INDEL', 'DEL', 'DUP', 'INV', 'MEI', 'BND']
        individual_variant_object = IndividualVariantObject(variant_categories)
        individual = 'NA12878'
        vcf_path = '/home/chase/code/cmatkhan/genomics/assignment8/sv.reclassed.filtered.vcf'
        vcf_type = 'sv'
        individual_variant_object.setIndividual(individual)
        individual_variant_object.setVcfPathAndType(vcf_type, vcf_path)
        self.assertEqual(individual_variant_object.vcf_type, vcf_type)
        self.assertEqual(individual_variant_object.vcf_path, vcf_path)

    def test_setVcfIndexDict(self):
        """

        :param vcf_format_line:
        :return:
        """
        variant_categories = ['SNV', 'INDEL', 'DEL', 'DUP', 'INV', 'MEI', 'BND']
        individual_variant_object = IndividualVariantObject(variant_categories)
        individual = 'NA12878'
        vcf_path = '/home/chase/code/cmatkhan/genomics/assignment8/sv.reclassed.filtered.vcf'
        vcf_type = 'sv'
        individual_variant_object.setIndividual(individual)
        individual_variant_object.setVcfPathAndType(vcf_type, vcf_path)
        individual_variant_object.setVcfIndexDict()

        test_index_dict = {'REF': 3, 'ALT': 4, 'INFO': 7, 'NA12878': 10}

        self.assertEqual(individual_variant_object.individual_index, test_index_dict['NA12878'])
        self.assertEqual(individual_variant_object.ref_index, test_index_dict['REF'])
        self.assertEqual(individual_variant_object.alt_index, test_index_dict['ALT'])
        self.assertEqual(individual_variant_object.info_index, test_index_dict['INFO'])

    def test_setRefAltDict(self):
        """
        set new attribute genotype_dict which contains a reference and alternate genotype and string lengths at a given location eg {'ref': ['A', 1], 'alt':['AT', 2]}
        :param vcf_genotype: reference genotype extracted from a vcf file. type list with structure [reference_genotype, alternate_genotype]
                        eg ['A', 'ATACG']. Location information (char other than [ATGC]) may be present
        """
        variant_categories = ['SNV', 'INDEL', 'DEL', 'DUP', 'INV', 'MEI', 'BND']
        individual_variant_object = IndividualVariantObject(variant_categories)
        individual = 'NA12878'
        vcf_path = '/home/chase/code/cmatkhan/genomics/assignment8/sv.reclassed.filtered.vcf'
        vcf_type = 'sv'
        individual_variant_object.setIndividual(individual)
        individual_variant_object.setVcfPathAndType(vcf_type, vcf_path)
        individual_variant_object.setVcfIndexDict()
        sv_line = '1	66324	147_1	N	]19:107966]N	157.92	LOW	SVTYPE=BND;POS=66324;SVLEN=41642;END=107966;STRANDS=-+:11;IMPRECISE;CIPOS=-226,30;CIEND=-30,370;CIPOS95=-98,30;CIEND95=-30,101;MATEID=147_2;EVENT=147;SU=11;PE=11;SR=0;PRPOS=3.27199733889e-103,3.549495573e-103,3.84090665063e-103,4.16951798948e-103,4.52241922941e-103,4.88762121121e-103,5.28418466597e-103,5.7155099089e-103,6.18557977931e-103,6.67232609604e-103,7.1812625176e-103,7.74244999799e-103,8.36374583928e-103,9.01044244161e-103,9.70685680019e-103,1.0463067937e-102,1.12709747027e-102,1.20932820065e-102,1.29765782309e-102,1.39314029984e-102,1.75318450674e-08,2.11763967082e-08,2.54855121473e-08,3.06170208247e-08,3.67682198476e-08,4.40121367859e-08,5.27597197866e-08,6.32671491462e-08,7.53385776262e-08,8.96792790727e-08,1.06731930154e-07,1.27011315037e-07,1.50780425027e-07,1.78564297311e-07,2.11628140763e-07,2.50406633029e-07,2.95521966226e-07,3.48784980538e-07,4.1073294748e-07,4.81546542885e-07,5.65416121027e-07,6.62467793689e-07,7.73723096336e-07,9.0402621198e-07,1.05411769337e-06,1.22580158799e-06,1.42922834069e-06,1.66398359114e-06,1.93210861377e-06,2.24170351687e-06,2.58493452482e-06,2.97726432066e-06,3.44029755404e-06,3.95784944101e-06,4.54888283198e-06,5.22173760284e-06,5.98904138341e-06,6.8520868632e-06,7.83223732835e-06,8.9438906078e-06,1.0174682373e-05,1.15626134297e-05,1.31490157262e-05,1.48884060701e-05,1.68738488316e-05,1.90995061322e-05,2.15440621249e-05,2.43159549356e-05,2.7391983497e-05,3.08060006268e-05,3.46066728228e-05,3.88146158074e-05,4.34727709679e-05,4.85039280595e-05,5.42428440015e-05,6.04107733366e-05,6.72164640124e-05,7.47058253617e-05,8.28884130478e-05,9.18572725036e-05,0.000101665395906,0.000112482927898,0.00012392804277,0.000136486546918,0.00015032493572,0.000165039813854,0.00018138463437,0.00019873740213,0.000217381473853,0.000237780622066,0.000259742245041,0.000283253029412,0.000308640325864,0.000335499395399,0.000364682950702,0.00039525929833,0.000428013531992,0.000463240426405,0.000499972704709,0.00053977260518,0.000581691551324,0.000625530200652,0.000672523484221,0.000722347240795,0.000773362444329,0.000828160747163,0.000887079763682,0.000947625939623,0.0010109275151,0.00107751357896,0.00114677349865,0.0012204998881,0.00129604400277,0.00137444429609,0.00145646015057,0.00154196281602,0.00163188485532,0.00172392884205,0.00181764927489,0.00191645924587,0.00201777700496,0.00212163821001,0.00222926087415,0.00233924124771,0.00245319554218,0.0025719480596,0.00269006795123,0.00281356718271,0.00294188739686,0.00306878753372,0.00320093152877,0.00333395714528,0.00347059029481,0.00360893332775,0.00375050886639,0.00389479394135,0.00403892515503,0.00418842768497,0.00433921876049,0.00448917027447,0.00463986022081,0.00479045991729,0.00494584397135,0.00510359559793,0.00525944173599,0.00541862756831,0.00557676887077,0.00573356653182,0.00589271659499,0.00605376037059,0.00621569514566,0.00637822737382,0.0065367701924,0.00669691080766,0.0068556477817,0.00701179318412,0.00717099299821,0.00733247448792,0.00749131865508,0.00764649087291,0.00779919469293,0.00795294250777,0.00810759646412,0.0082598448629,0.00841367553716,0.00855807080629,0.00870543832687,0.00885175588173,0.00899430710919,0.00914133805294,0.00928710109414,0.009424583842,0.00955659772154,0.00969275659647,0.00982361459705,0.00995443842741,0.0100834179261,0.010206175917,0.0103294814812,0.0104464846705,0.0105658964542,0.0106868938244,0.0108011848369,0.0109212078889,0.0110358701427,0.0111408514309,0.0112507137021,0.0113582316462,0.0114642649605,0.0115695103147,0.01167135515,0.0117720297341,0.0118718562604,0.0119658125267,0.0120563958024,0.0121482764053,0.0122362336899,0.0123190127312,0.0124048323215,0.0124895055008,0.012573009482,0.0126524591402,0.0127305175718,0.0128061846401,0.0128779524933,0.0129486328411,0.0130170251472,0.0130861234655,0.0131515765697,0.0132157350678,0.0132779305631,0.0133383908703,0.0133961984004,0.0134563275184,0.0135136837918,0.0135679765046,0.0136212248215,0.0136763333713,0.0137262421658,0.0137768833332,0.0138275761191,0.0138779199984,0.0139233266266,0.0139686873815,0.0140149799917,0.0140569909265,0.0140967572074,0.00562620815774,0.000893769418814,5.65255954786e-05,3.57385330929e-06,2.25987001915e-07,5.687367112e-09,1.43130141036e-10,3.60227078555e-12,9.06662321573e-14,2.28188717751e-15,4.19044821657e-104,1.67067917517e-104,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198,1.35470725501e-198;PREND=1.310739161e-198,1.310739161e-198,1.310739161e-198,1.310739161e-198,1.310739161e-198,1.310739161e-198,1.310739161e-198,1.310739161e-198,1.310739161e-198,1.310739161e-198,1.310739161e-198,1.310739161e-198,1.310739161e-198,1.310739161e-198,1.310739161e-198,1.310739161e-198,1.310739161e-198,1.310739161e-198,3.29534243205e-110,5.21650592772e-109,9.00222104163e-14,3.57629059259e-12,1.42071263275e-10,5.64381185404e-09,2.24186963031e-07,3.54468795754e-06,5.60338804043e-05,0.000352611499393,0.00221874045742,0.00555645735471,0.013915635547,0.0138698475502,0.013826400178,0.0137805410004,0.0137355753007,0.0136919747121,0.013645743338,0.0135992303507,0.0135469796863,0.0134955056487,0.0134400198058,0.0133822631142,0.0133248462313,0.0132664326855,0.0132053011277,0.0131381953539,0.0130725137739,0.0130104671978,0.0129442673216,0.0128786034653,0.0128108396694,0.0127369824899,0.0126618777278,0.0125870715058,0.0125097997341,0.0124352396228,0.0123553372681,0.0122720056215,0.0121885413695,0.0121042016506,0.0120158641943,0.0119287716061,0.011837567801,0.0117421221686,0.0116503142751,0.0115525193292,0.0114560478463,0.0113549496045,0.0112538548677,0.0111459211207,0.0110427082391,0.0109338931585,0.0108245500971,0.0107105373332,0.0105957120623,0.0104745966248,0.0103584689992,0.0102364073721,0.0101159564643,0.00999647772772,0.0098762611724,0.00975217598141,0.00962618782313,0.00949730819538,0.00936903498104,0.00923655621983,0.00909860805927,0.00896255077061,0.00882476360811,0.00868039865617,0.00854071513427,0.00840354348112,0.0082615502982,0.00811800142187,0.00797827556847,0.00783323160205,0.00768423561863,0.00753888166085,0.00739270734643,0.00724947843328,0.00709799040432,0.0069445861607,0.00679781009422,0.0066489049566,0.00650347537396,0.00635495384848,0.00620829807238,0.00605803234227,0.00590844832364,0.00575951327149,0.0056112820338,0.00546533933863,0.00531942886893,0.00517401138448,0.00502926339471,0.00488629809802,0.00474148280378,0.00460316546957,0.00446238209573,0.00432687545431,0.00419083277437,0.00405264864472,0.00391983834136,0.00378668953088,0.00365546415307,0.00352921816456,0.00340293794957,0.00327936905932,0.00315890139347,0.00303890336528,0.00292053887846,0.00280559958565,0.00269050914652,0.00257956500532,0.00247290615896,0.00236679769034,0.00226496932244,0.00216349494591,0.00206769221341,0.00197434615578,0.0018798269538,0.00179103908132,0.0017042397569,0.00162193103826,0.00154005255644,0.00146162092032,0.00138443677507,0.00130993525431,0.00123913894966,0.00117035611034,0.00110482766928,0.0010425134498,0.000981846361214,0.000923055324792,0.000866802104439,0.000814519617508,0.000763531219524,0.000715478426287,0.000670032706533,0.000626494925244,0.000585243841,0.000546398590083,0.000508781782625,0.000474095424187,0.000440669635544,0.0004089533296,0.000379509289555,0.000351038250354,0.000324631026875,0.000299787543238,0.000276848927726,0.000254848818125,0.000234345082105,0.000215435738585,0.000197690284973,0.000181015041044,0.000165707382259,0.000151708087061,0.000138526279369,0.000126251227992,0.000114896255174,0.000104425951852,9.47854927371e-05,8.59505936294e-05,7.78193199422e-05,7.03337932956e-05,6.34188798192e-05,5.71481768039e-05,5.1406875486e-05,4.62499722263e-05,4.15099645651e-05,3.71406669847e-05,3.32827346439e-05,2.97262703898e-05,2.65159069821e-05,2.36569955173e-05,2.10299232563e-05,1.86867769951e-05,1.65631301809e-05,1.46419486187e-05,1.29483275949e-05,1.14450643194e-05,1.00937642208e-05,8.8949583804e-06,7.82409856793e-06,6.86998817474e-06,6.01653861166e-06,5.26134405755e-06,4.59718233254e-06,4.00816605723e-06,3.49354658201e-06,3.04235226286e-06,2.64635338199e-06,2.29223866374e-06,1.98736990616e-06,1.71921711429e-06,1.48075497295e-06,1.2777968351e-06,1.10044583208e-06,9.43062608146e-07,8.07412749511e-07,6.8991184668e-07,5.90609698276e-07,5.05862406506e-07,4.31135029816e-07,3.67007458127e-07,3.12209932863e-07,2.65110279836e-07,2.24481689109e-07,1.89879538585e-07,1.60815319986e-07,1.35792017761e-07,1.1430846825e-07,9.59405118781e-08,8.07711336825e-08,6.77184659946e-08,5.66771984067e-08,4.73908718506e-08,3.95772804221e-08,3.30578859495e-08,2.75266911978e-08,2.29147877112e-08,1.90384982837e-08,1.57329966723e-08,1.30062260948e-08,1.07790499164e-08,8.88374392998e-09,7.35148732472e-09,6.04491249423e-09,4.96340460382e-09,4.07124396593e-09,3.34251780043e-09,2.73556553142e-09,2.23469809967e-09,1.81917739654e-09,1.48180812607e-09,1.20802797741e-09,9.83614795993e-10,7.98619961409e-10,6.46613652466e-10,5.23284432413e-10,4.22991182334e-10,3.4214135703e-10,2.75667220146e-10,2.21278329593e-10,1.78133251233e-10,1.439286149e-10,1.15802348871e-10,9.31865310709e-11,7.47667414382e-11,5.98010186079e-11,4.78353580858e-11,3.82834126373e-11,3.06140278155e-11,2.44607023547e-11,1.93560781186e-11,1.53647537798e-11,1.21329704707e-11,9.64572369834e-12,7.63897388402e-12,6.04652374551e-12,4.76328197476e-12,3.77184602268e-12,2.96453291409e-12,2.33450767958e-12,1.83990325903e-12,1.44391619334e-12,1.13139625588e-12,8.87830632148e-13,6.96061789042e-13,5.44761236108e-13,4.26382837985e-13,3.33754624428e-13,2.59959595638e-13,2.01794914541e-13,1.55707168742e-13,1.21062251595e-13,9.3922902465e-14,7.27857522696e-14,5.66664217033e-14,4.39266755536e-14,3.41545152643e-14,2.63884968874e-14,2.03598946453e-14,1.57044545417e-14,1.21457297972e-14,9.28054390273e-15,7.10345233156e-15,5.45573756814e-15,4.1897242906e-15,3.21334788833e-15,2.4480360685e-15,1.87444426892e-15,1.44053130933e-15,1.09329731448e-15,8.31034498904e-16,6.36710318654e-16,4.84177208555e-16,3.70322613231e-16,2.78063261052e-16,2.09318667804e-16,1.56751760681e-16,1.19076176248e-16,9.00744951933e-17,6.73655960723e-17,4.99063003077e-17,3.7970559023e-17,2.82178001519e-17,2.09383100299e-17,1.56406518119e-17,1.17461140288e-17,8.83550446713e-18,6.60788084939e-18,5.00495909904e-18,3.78346576117e-18,2.85622075906e-18,2.15633024637e-18,1.58569536988e-18,1.18746518796e-18,8.70226192809e-19,6.49339416053e-19,4.78165222174e-19,3.55107756649e-19,2.65091928453e-19,1.97228894873e-19,1.46465162483e-19,1.08724480462e-19,7.96996069652e-20,5.90621345399e-20,4.33203376311e-20,3.15467874852e-20,2.24365480419e-20,1.6494098247e-20,1.20749849554e-20,8.74255502195e-21,6.47529545269e-21,4.79526599239e-21,3.54158532168e-21,2.50381054191e-21,1.88241725946e-21,1.37569237428e-21,9.85510671359e-22,7.05572586854e-22,5.03356267449e-22,3.62743439248e-22,2.63296283782e-22,1.94831588731e-22,1.38111992078e-22,1.00048525414e-22,7.35969033593e-23,5.39249629648e-23,3.91531774289e-23,2.76693338248e-23,1.97485140774e-23,1.39584205053e-23,9.9746891974e-24,7.13524885699e-24,5.24933888685e-24,3.75771279706e-24,2.77332104454e-24,1.95754299082e-24,1.33842197208e-109,1.17077056895e-109,1.00619022768e-109,8.75156944493e-110,7.59855152717e-110,6.55191319972e-110,5.65140918134e-110,4.98387594142e-110,4.21524539002e-110,3.5435046774e-110,3.07081281377e-110,2.68316170691e-110,2.37242477401e-110,2.04137138412e-110,1.72967761163e-110,1.48186926586e-110,1.27072622663e-110,1.11251083472e-110,9.26665061302e-111,8.01101492635e-111;SNAME=NA12886:6142_1,NA12877:6122_1;ALG=PROD;AF=0.1429;NSAMP=3;MSQ=45.72	GT:GQ:SQ:GL:DP:RO:AO:QR:QA:RS:AS:RP:AP:AB	0/1:41.52:41.52:-11,-7,-38:60:49:11:49:11:0:0:49:11:0.18	0/0:12.13:0.27:-0,-1,-4:4:4:0:4:0:1:0:3:0:0	./.:.:.:.:0:0:0:0:0:0:0:0:0:.	0/0:1.76:4.77:0,0,0:0:0:0:0:0:0:0:0:0:.	0/0:1.76:4.77:0,0,0:0:0:0:0:0:0:0:0:0:.	0/0:44.50:0.00:-0,-5,-15:16:16:0:15:0:6:0:9:0:0	0/0:44.50:0.00:-0,-5,-15:16:16:0:15:0:6:0:9:0:0	0/0:66.08:0.00:-1,-7,-27:30:28:1:28:1:0:0:28:1:0.034	0/0:74.98:0.00:-1,-8,-30:33:31:1:31:1:0:0:31:1:0.031	0/0:4.23:2.06:-0,-0,-1:1:1:0:1:0:0:0:1:0:0	0/1:74.15:74.15:-12,-4,-28:50:38:11:38:11:0:0:38:11:0.22	./.:.:.:.:0:0:0:0:0:0:0:0:0:.	./.:.:.:.:0:0:0:0:0:0:0:0:0:.	0/0:1.76:4.77:0,0,0:0:0:0:0:0:0:0:0:0:.	0/0:4.23:2.06:-0,-0,-1:1:1:0:1:0:0:0:1:0:0	1/1:4.42:21.49:-2,-0,-0:1:0:1:0:1:0:0:0:1:1	./.:.:.:.:0:0:0:0:0:0:0:0:0:.	0/0:4.23:2.06:-0,-0,-1:2:2:0:1:0:0:0:1:0:0'
        test_genotype_dict = {'ref': ['N', 1], 'alt': [']19:107966]N', 12]}
        individual_variant_object.setGenotype(sv_line)
        self.assertEqual(individual_variant_object.genotype_dict, test_genotype_dict)
        self.assertEqual(individual_variant_object.variant_info, 'BND')

    def combineVariantDicts(self, another_variant_count_dict):
        """

        :param another_variant_count_dict:
        :return:
        """
        pass

    def combineUnequalLengthDictValues(self, longer_value_list, shorter_value_list):
        pass

    def filterGenotypeByQuality(vcf_genotype_string, threshold=1):
        """
        evaluate the genotype string from the vcf to determine if quality is high enough to retain in analysis
        :param vcf_genotype_string: the complete genotype entry for a given individual
        :param threshold: threshold by which to filter a genotype
        :return: boolean indicating whether quality is high enough to keep the genotype in analysis
        """
        pass


class TestIndividualVariantDistribution(unittest.TestCase):

    def test_constructor(self):
        variant_categories = ['SNV', 'INDEL', 'DEL', 'DUP', 'INV', 'MEI', 'BND']
        dist_categories = ['INDEL', 'DUP', 'MEI']
        individual_variant_distribution = IndividualVariantDistribution(variant_categories, dist_categories)

        self.assertEqual(individual_variant_distribution.dist_categories, dist_categories)

    def test_createVariantLengthDistribution(self):
        """

        """
        variant_categories = ['SNV', 'INDEL', 'DEL', 'DUP', 'INV', 'MEI', 'BND']
        dist_categories = ['INDEL', 'DUP', 'MEI']
        individual_variant_distribution = IndividualVariantDistribution(variant_categories, dist_categories)
        variant_type = 'DUP'
        feature_length = '14'
        individual_variant_distribution.createVariantLengthDistribution(variant_type, feature_length)
        variant_type = 'DUP'
        feature_length = '14'
        individual_variant_distribution.createVariantLengthDistribution(variant_type, feature_length)
        variant_type = 'DUP'
        feature_length = '10'
        individual_variant_distribution.createVariantLengthDistribution(variant_type, feature_length)
        variant_type = 'MEI'
        feature_length = '1'
        individual_variant_distribution.createVariantLengthDistribution(variant_type, feature_length)
        variant_length_dist_dict = {'DUP': {'14': 2, '10': 1}, 'MEI': {'1': 1}}
        self.assertEqual(individual_variant_distribution.variant_length_dist, variant_length_dist_dict)

    def test_increment(self):
        """
        increment value
        :param value: input value to be incremented
        :param amount: amount to increment value by
        :return: the value incremented by the amount
        """
        variant_categories = ['SNV', 'INDEL', 'DEL', 'DUP', 'INV', 'MEI', 'BND']
        dist_categories = ['INDEL', 'DUP', 'MEI']
        individual_variant_distribution = IndividualVariantDistribution(variant_categories, dist_categories)
        function_increment = individual_variant_distribution.increment(1, 1)
        true_result = 2
        self.assertEqual(function_increment, true_result)


if __name__ == '__main__':
    unittest.main()
